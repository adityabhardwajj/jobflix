// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  applications  JobApplication[]
  savedJobs     SavedJob[]
  profile       UserProfile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  bio          String?
  location     String?
  website      String?
  linkedin     String?
  github       String?
  resume       String?
  skills       String[]
  experience   String?
  education    String?
  preferences  Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  website     String?
  logo        String?
  size        String?
  industry    String?
  location    String?
  founded     Int?
  rating      Float?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  jobs Job[]
}

model Job {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  description String
  requirements String[]
  benefits     String[]
  salary      String?
  location    String
  type        JobType
  level       JobLevel
  remote      Boolean    @default(false)
  featured    Boolean    @default(false)
  verified    Boolean    @default(false)
  status      JobStatus  @default(ACTIVE)
  companyId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  expiresAt   DateTime?

  company      Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications JobApplication[]
  savedBy      SavedJob[]
}

model JobApplication {
  id        String            @id @default(cuid())
  jobId     String
  userId    String
  status    ApplicationStatus @default(PENDING)
  coverLetter String?
  resume    String?
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
}

model SavedJob {
  id        String   @id @default(cuid())
  jobId     String
  userId    String
  createdAt DateTime @default(now())

  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
}

enum UserRole {
  USER
  ADMIN
  RECRUITER
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum JobLevel {
  ENTRY
  JUNIOR
  MID
  SENIOR
  LEAD
  PRINCIPAL
  EXECUTIVE
}

enum JobStatus {
  ACTIVE
  PAUSED
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  INTERVIEW
  OFFER
  REJECTED
  WITHDRAWN
}